trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - services/*
    - infrastructure/*
    - pipelines/*

pr:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - services/*
    - infrastructure/*
    - pipelines/*

variables:
  - group: ecommerce-secrets
  - name: buildConfiguration
    value: 'Release'
  - name: dockerRegistry
    value: 'ecommerce.azurecr.io'

stages:
- stage: Build
  displayName: Build and Test
  jobs:
  - job: Build
    displayName: Build and Test
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '7.0.x'
        includePreviewVersions: true

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '**/*.Tests.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: PowerShell@2
      displayName: 'Run Security Tests'
      inputs:
        targetType: 'inline'
        script: |
          # Install and run OWASP Dependency Check
          dotnet tool install --global dotnet-retire
          dotnet retire
          
          # Run security code analysis
          dotnet tool install --global dotnet-security-scan
          dotnet security-scan

    - task: PowerShell@2
      displayName: 'Run Compliance Checks'
      inputs:
        targetType: 'inline'
        script: |
          # Run NIST compliance checks
          dotnet test tests/SecurityAndCompliance.Tests/SecurityAndCompliance.Tests.csproj --filter "Category=NIST"
          
          # Run GDPR compliance checks
          dotnet test tests/SecurityAndCompliance.Tests/SecurityAndCompliance.Tests.csproj --filter "Category=GDPR"
          
          # Run PCI DSS compliance checks
          dotnet test tests/SecurityAndCompliance.Tests/SecurityAndCompliance.Tests.csproj --filter "Category=PCI"

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'build-artifacts'

- stage: SecurityScan
  displayName: Security Scan
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: SecurityScan
    displayName: Security Scan
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: PowerShell@2
      displayName: 'Run Vulnerability Scan'
      inputs:
        targetType: 'inline'
        script: |
          # Run OWASP ZAP scan
          docker run -t owasp/zap2docker-stable zap-baseline.py -t https://$(API_GATEWAY_URL)
          
          # Run SonarQube analysis
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"ECommerce" /d:sonar.host.url="$(SONARQUBE_URL)" /d:sonar.login="$(SONARQUBE_TOKEN)"
          dotnet build
          dotnet sonarscanner end /d:sonar.login="$(SONARQUBE_TOKEN)"

    - task: PowerShell@2
      displayName: 'Run Static Code Analysis'
      inputs:
        targetType: 'inline'
        script: |
          # Run Fortify SCA
          dotnet tool install --global fortify-sca
          dotnet fortify-sca
          
          # Run Checkmarx scan
          dotnet tool install --global checkmarx
          dotnet checkmarx

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/security'
        ArtifactName: 'security-reports'

- stage: Deploy
  displayName: Deploy to Production
  dependsOn: SecurityScan
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: Deploy to Production
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build and Push Docker Images
      inputs:
        containerRegistry: |
          type: ACR
          name: $(dockerRegistry)
          username: $(ACR_USERNAME)
          password: $(ACR_PASSWORD)
        command: buildAndPush
        Dockerfile: '**/Dockerfile'
        buildContext: .
        tags: |
          $(Build.BuildNumber)
          latest

    - task: Kubernetes@1
      displayName: Deploy to Kubernetes
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: '$(AZURE_SUBSCRIPTION)'
        azureResourceGroup: '$(RESOURCE_GROUP)'
        kubernetesCluster: '$(KUBERNETES_CLUSTER)'
        command: 'apply'
        arguments: '-f infrastructure/kubernetes/'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'

    - task: PowerShell@2
      displayName: 'Run Post-Deployment Security Checks'
      inputs:
        targetType: 'inline'
        script: |
          # Run security tests
          dotnet test tests/SecurityAndCompliance.Tests/SecurityAndCompliance.Tests.csproj --filter "Category=PostDeployment"
          
          # Run compliance validation
          dotnet test tests/SecurityAndCompliance.Tests/SecurityAndCompliance.Tests.csproj --filter "Category=Compliance"

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/compliance'
        ArtifactName: 'compliance-reports' 